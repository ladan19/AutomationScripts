AWSTemplateFormatVersion: '2010-09-09'
Description: VPC Nested Stack Teste

Parameters:
  VpcBlock:
    Type: String
    Default: 10.0.0.0/16
    Description: VPC default CIDR
  Subnet1Block:
    Type: String
    Default: 10.0.1.0/24
    Description: CIDR block for subnet1

Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups:
      - Label:
        default: 
        Parameters:
          - VpcBlock
          - Subnet1Block
    ParameterLabels:
      VpcBlock:
        default: VPC CIDR range selection


Resources:
  TemplateVPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Ref VpcBlock
      EnableDnsHostnames: true
      EnableDnsSupport: true
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-VPC"

  Subnet1:
    Type: AWS::EC2:Subnet
    Properties:
      VpcId: !Ref TemplateVPC
      CidrBlock: !Ref Subnet1Block
      Tags:
        - Key: Name
        Value: !Sub "${AWS::StackName}-subnet1"
      #AvailabilityZone: us-east-2 or we can using intrinsic functions 
      AvailabilityZone:
        Fn::Select:
          - '0'
          - Fn::GetAZs:
            Ref: AWS::Region

  RouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref TemplateVPC
      Tags:
        - Key: Name
          Value: Public Subnet
        - Key: Network
          Value: Public
  
  RouteTableAssoc:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref Subnet1
      RouteTableId: !Ref RouteTable

  InternetGW:
    Type: AWS::EC2::InternetGateway

  VPCGatewayAtt:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      InternetGatewayId: !Ref InternetGW
      VpcId: !Ref TemplateVPC
  
  VPCRoute:
    DependsOn: VPCGatewayAtt 
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref RouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGW


Outputs:
  Subnet1Id:
    Description: Subnet 1 Id
    Value: !Ref Subnet1

  VPCId:
    Description: VPC Id
    Value: !Ref TemplateVPC
