AWSTemplateFormatVersion: 2010-09-09

Parameters:
  MyKey:
    Type: AWS::EC2::KeyPair::KeyName
    Description: Select the keypair
  EnvironmentName:
    Description: Select the environment
    Type: String
    Default: QA
    AllowedValues: 
      - QA
      - prod
      - dev
      - lab


Mappings:
  MyRegionMap:
    us-east-1:
      AMIID: ami-0a887e401f7654935
    sa-east-1:
      AMIID: ami-080a223be3de0c3b8     
  MyEnvironmentMap:
    QA:
      instanceType: t2.micro
    prod:
      instanceType: t2.small
    dev:
        instanceType: t2.micro
    lab:
       instanceType: t2.micro

#Conditions: 
#  SecurityGroupDEV: !Equals [!Ref EnvironmentName, dev]


Resources:
  EC2Instance:
    Type: AWS::EC2::Instance
    Properties:
      ImageId: !FindInMap
        - MyRegionMap
        - !Ref 'AWS::Region'
        - AMIID
      InstanceType: !FindInMap
        - MyEnvironmentMap
        - !Ref EnvironmentName
        - instanceType
      KeyName: !Ref MyKey
      UserData:
        Fn::Base64: |
          #!/bin/bash
          sudo yum update
          sudo yum -y erase java-1.7.0-openjdk.x86_64
          sudo yum -y install java-1.8.0-openjdk.x86_64
          sudo yum -y install java-1.8.0-openjdk-devel
          sudo yum -y install tomcat
          service tomcat start
          mkdir /usr/share/tomcat/webapps/ROOT
          touch /usr/share/tomcat/webapps/ROOT/index.html
          echo "Teste do Ladan para UserData" > /usr/share/tomcat/webapps/ROOT/index.html
      SecurityGroups:
        - !Ref SSHSecurityGroup
      Tags:
        -
          Key: Name
          Value: Stack-1

  SSHSecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties: 
      GroupDescription: SG from SSH access and anything more
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: '22'
          ToPort: '22'
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: '8080'
          ToPort: '8080'
          CidrIp: 0.0.0.0/0
  
  MyElasticIP:
    Type: AWS::EC2::EIP
    Properties:
      InstanceId: !Ref EC2Instance

  

Outputs:
  MyApp:
    Description: This is my Web App
    Value: !Sub 'http://${EC2Instance.PublicDnsName}:8080/index.html'
  MyInstanceId:
    Description: My instance id
    Value: !Ref EC2Instance
  MyDNSName:
    Description: My Public DNS Name
    Value: !GetAtt EC2Instance.PublicDnsName
  MyInstanceAvailabilityZone:
    Description: Instance Availability Zone
    Value: !GetAtt EC2Instance.AvailabilityZone    
    Export: 
      Name: !Sub "${AWS::StackName}-InstanceAz"
